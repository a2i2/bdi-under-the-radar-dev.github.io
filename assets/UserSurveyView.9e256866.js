import{v as R,w as f,E as k,d as L,x as V,c,r as P,y as A,u as w,z as B,b as N,l as $,j,k as x}from"./index.7b1d4126.js";import{l as z,_ as F,c as Y,s as H}from"./surveyStorage.5b60f121.js";import{u as J}from"./surveyStore.dec2dbae.js";import{u as K}from"./participantStore.fd8a12b1.js";import"./storeHelpers.93cc6e6f.js";let y;const M=new Uint8Array(16);function W(){if(!y&&(y=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!y))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return y(M)}const n=[];for(let e=0;e<256;++e)n.push((e+256).toString(16).slice(1));function q(e,t=0){return(n[e[t+0]]+n[e[t+1]]+n[e[t+2]]+n[e[t+3]]+"-"+n[e[t+4]]+n[e[t+5]]+"-"+n[e[t+6]]+n[e[t+7]]+"-"+n[e[t+8]]+n[e[t+9]]+"-"+n[e[t+10]]+n[e[t+11]]+n[e[t+12]]+n[e[t+13]]+n[e[t+14]]+n[e[t+15]]).toLowerCase()}const G=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),U={randomUUID:G};function Q(e,t,i){if(U.randomUUID&&!t&&!e)return U.randomUUID();e=e||{};const o=e.random||(e.rng||W)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,t){i=i||0;for(let s=0;s<16;++s)t[i+s]=o[s];return t}return q(o)}async function X(e,t){const i=new URL("submissions",k),o={"Content-Type":"application/json"};t&&(o.Authorization=`Bearer ${t}`);const s=await fetch(i,{method:"POST",headers:o,body:JSON.stringify(e)});if(!s.ok){const l=`An error has occured: ${s.status}`;throw console.error(s),new Error(l)}}async function Z(e,t,i,o){const s=R(),u=f().getCurrentOffsetTime().toISOString(),d={id:Q(),payloadType:"SURVEY_RESPONSE",payload:{type:"SURVEY_RESPONSE",surveyResponse:{surveyName:t.name,surveyVersion:t.version,surveyType:t.surveyType,interventionId:t.interventionId,recordedAt:u,surveyResponse:i}},experimentId:e._embedded.trial.experiment.id,participantId:e.id,clientInfo:s,metadata:"",initiatedAt:u,submittedAt:u,protocolEntryId:t.id,trialId:e._embedded.trial.id};return X(d,o)}const ee={key:1},se=L({__name:"UserSurveyView",props:{surveyId:null},setup(e){const t=e,{user:i,getAccessTokenSilently:o}=$(),s=i,l=J(),u=V(),d=K(),_=j(),p=c(()=>s.value.user_metadata.participantId),g=c(()=>d.getCachedParticipant(p.value)),b=c(()=>d.getCachedParticipantSurveys(p.value)),S=c(()=>{var a;return(a=b.value)==null?void 0:a.find(r=>r.id===t.surveyId)}),m=c(()=>{var a;return(a=S.value)==null?void 0:a.survey}),C=c(()=>!!(g.value&&m.value)),h=P(),I=P(),v=c(()=>`userSurvey:${t.surveyId}`);A(async()=>{const a=z(v.value);h.value=a.oldData,I.value=a.oldPageIndex;try{const r=await o();await Promise.all([d.cacheParticipant(p.value,r),d.cacheParticipantSurveys(p.value,r,!0)])}catch(r){console.error("Unable to download participant info",r),_.push({path:"/error-page"})}});async function D(a){if(!C.value)throw new Error("On complete shouldn't trigger before we're loaded");const r=await o();await Z(g.value,S.value,a,r),l.setSurveyCompleted(!0),Y(v.value)}function E(a){l.setSurveyCompleted(!1),u.setPageCount(a.pageCount),u.setPageTitle(a.currentPage.name)}function T(a,r){u.setPageIndex(a),u.setPageTitle(r)}function O(a,r){H(v.value,a,r)}return(a,r)=>w(m)?(x(),B(F,{key:0,"survey-data":w(m),"initial-state":h.value,"initial-page-idx":I.value,onOnComplete:D,onOnLoaded:E,onOnPageChanged:T,onOnPartialSend:O},null,8,["survey-data","initial-state","initial-page-idx"])):(x(),N("div",ee,"Please Wait"))}});export{se as default};
